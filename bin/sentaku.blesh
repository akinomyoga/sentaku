#!/usr/bin/env bash

## Description {{{
#
# Utility to make sentaku (selection) window with shell command.
#
# Homepage: https://github.com/rcmdnk/sentaku
#
# Usage: sentaku [-HNladnh] [-f <file>] [-s <sep>] [input variables]
#
#
SENTAKU_VERSION=v0.7.2
SENTAKU_DATE="10/May/2019"
#
# }}}

## License {{{
#
#The MIT License (MIT)
#
#Copyright (c) 2014 rcmdnk
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of
#this software and associated documentation files (the "Software"), to deal in
#the Software without restriction, including without limitation the rights to
#use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#the Software, and to permit persons to whom the Software is furnished to do so,
#subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# }}}

# Default variables # {{{
_SENTAKU_INPUT_FILE=${_SENTAKU_INPUT_FILE:-}
_SENTAKU_SEPARATOR=${_SENTAKU_SEPARATOR:-$IFS}
_SENTAKU_MAX=${_SENTAKU_MAX:-20}
_SENTAKU_MIN_SHOW=${_SENTAKU_MIN_SHOW:-3}
_SENTAKU_NOHEADER=${_SENTAKU_NOHEADER:-0}
_SENTAKU_NONUMBER=${_SENTAKU_NONUMBER:-0}
_SENTAKU_SHOWLAST=${_SENTAKU_SHOWLAST:-0}
_SENTAKU_CHILD=${_SENTAKU_CHILD:-0}
# 0: AND (smart case), 1: AND (case sensitive), 2: starts with (smart case), 3: starts with (case sensitive)
_SENTAKU_SEARCH_OPT=${_SENTAKU_SEARCH_OPT:-0}
_SENTAKU_PAGE_CHANGE=${_SENTAKU_PAGE_CHANGE:-1}
_SENTAKU_KEYMODE=${_SENTAKU_KEYMODE:-0}
_SENTAKU_COLOR_NUM_ONLY=${_SENTAKU_COLOR_NUM_ONLY:-0}
_SENTAKU_LINE_HIGHLIGHT=${_SENTAKU_LINE_HIGHLIGHT:-1}
_SENTAKU_DEBUG=${_SENTAKU_DEBUG:-0}
# }}}

function sentaku/help {
  if [[ -t 1 ]]; then
    echo "$_sentaku_help" | ${PAGER:-less} >/dev/tty
  else
    echo "$_sentaku_help"
  fi
}

function sentaku/initialize { # {{{
  # Set variables
  _sentaku_file=${SENTAKU_INPUT_FILE:-$_SENTAKU_INPUT_FILE}
  _sentaku_file_use=0
  _sentaku_sep=${SENTAKU_SEPARATOR:-$_SENTAKU_SEPARATOR}
  # If a separator is normal IFS, use space for file write out.
  # note: $' \t\n' should not be surrounded by '"'.
  if [[ $_sentaku_sep == $' \t\n' ]];then
    _sentaku_sep_push=' '
  else
    _sentaku_sep_push=$_sentaku_sep
  fi
  _sentaku_items=()
  _sentaku_items_cmdline=
  _sentaku_count=0
  _sentaku_max=${SENTAKU_MAX:-$_SENTAKU_MAX}
  _sentaku_min_show=${SENTAKU_MIN_SHOW:-$_SENTAKU_MIN_SHOW}
  _sentaku_header=
  _sentaku_opt_noheader=${SENTAKU_NOHEADER:-$_SENTAKU_NOHEADER}
  _sentaku_opt_nonumber=${SENTAKU_NONUMBER:-$_SENTAKU_NONUMBER}
  _sentaku_opt_showlast=${SENTAKU_SHOWLAST:-$_SENTAKU_SHOWLAST}
  _sentaku_opt_search=${SENTAKU_SEARCH_OPT:-$_SENTAKU_SEARCH_OPT}
  _sentaku_opt_pagechange=${SENTAKU_PAGE_CHANGE:-$_SENTAKU_PAGE_CHANGE}
  _sentaku_opt_keymode=${SENTAKU_KEYMODE:-$_SENTAKU_KEYMODE}
  _sentaku_opt_color_num=${SENTAKU_COLOR_NUM_ONLY:-$_SENTAKU_COLOR_NUM_ONLY}
  _sentaku_opt_line_highlight=${SENTAKU_LINE_HIGHLIGHT:-$_SENTAKU_LINE_HIGHLIGHT}
  _sentaku_opt_debug=${SENTAKU_DEBUG:-$_SENTAKU_DEBUG}
  _sentaku_show=
  _sentaku_rows=0
  _sentaku_cols=0
  _sentaku_max_show=0
  _sentaku_opt_align=0
  _sentaku_opt_delete=0
  _sentaku_opt_noshow=0
  _sentaku_stdin=0
  _sentaku_trapped=0
  _sentaku_normal_echo=${_sentaku_normal_echo:-1}

  _sentaku_invalidated=1

  _sentaku_ext_rows=0
  _sentaku_n_current=-1
  _sentaku_n_offset=0
  _sentaku_g_count=0
  _sentaku_arg=-1

  ## @var _sentaku_visual
  ##   _sentaku_visual=-1 ... single selection mode
  ##   _sentaku_visual=-2 ... visual selection mode
  ##   _sentaku_visual>=0 ... visual selection mode (currently selecting)
  _sentaku_visual=-1
  _sentaku_visual_list=()

  _sentaku_break=0
  _sentaku_search=""
  _sentaku_search_words=""
  _sentaku_items_n=0
  eval '_sentaku_items_'{0..999}'=();'
  _sentaku_stty_state=
  _sentaku_IFS=$IFS

  _sentaku_ret=0

  # Help
  _sentaku_help=${_sentaku_help:-"Usage: sentaku [-HNladnh] [-f <file>] [-s <sep>] [input variables]

Arguments:
  -f <file>  Set input file
  -s <sep>   Set separtor (default: ${SENTAKU_SEPARATOR:-$_SENTAKU_SEPARATOR})
             If <sep> is \"line\", \$'\\n' is set as a separator.
  -H         Force to show a header at sentaku window.
  -N         No nubmers are shown.
  -U         Use underline to show selected line, instead of highlighting.
  -l         Show last words instead of starting words for longer lines.
  -a         Align input list (set selected one to the first).
  -r <n>     Return nth value directly.
  -p         Push words to the file.
  -E         Use Emacs mode
  -V         Use Vmacs mode
  -c         Load functions as a child process in other sentaku process.
  -n         Don't run functions, to just source this file
  -v         Show version
  -h         Print this HELP and exit

Key operation at sentaku window
  Common for all:
    C-p/C-n  Up/Down.
    C-u/C-d  Half page down/Half page down.
    C-b/C-f  Page up/Page down.
    M-v/C-v  Page up/Page down.
    C-a/C-e  Go to the beggining/end.
    C-i/C-o  Move the item up/down.
    C-x      Quit.
    C-s      Start/Stop Visual mode (multi-selection).
    Space    Select/unselect current line for multi-selection.
             At Emacs mode or search mode in Vim mode,
             it selects when space is pushed twice.
    Esc      At search mode, first Esc takes it back to normal mode
             with selected words.
             Second Esc clear search mode.
             Visual mode is cleared by first Esc.
    Ener     Select and Quit.

  For Vim mode:
    n(any number) Set number. Multi-digit can be used (13, 320, etc...).
                  Used/reset by other key.
    k/j      Up/Down (if n is given, n-th up/n-th down).
    gg/G     Go to top/bottom. (If n is given, move to n-th candidate.)
    d        Delete current candidate. (in case you use input file.)
    s        Show detail of current candidate.
    v        Visual mode, same as C-s
    /        Search.
    q        Quit.
    Others   Nothing happens.

  For Emacs mode:
    Others   Normal keys start an incremental search.
"}

  # Lines and columns at beginning
  _sentaku_rows=$LINES
  _sentaku_cols=$COLUMNS
  [[ $_sentaku_rows ]] || _sentaku_rows=$(tput lines)
  [[ $_sentaku_cols ]] || _sentaku_cols=$(tput cols)

  # Check std input
  [[ ! -t 0 ]] && _sentaku_stdin=1

  # User initialization
  sentaku/INITIALIZE
} # }}}

function sentaku/INITIALIZE {
  :
}

function sentaku/list#clear {
  _sentaku_visual_list=()
}
function sentaku/list#set {
  local -i index=$1 arg=$2
  if ((arg)); then
    _sentaku_visual_list[index]=$arg
  else
    unset '_sentaku_visual_list[index]'
  fi
}


function sentaku/finalize {
  IFS=$_sentaku_IFS

  if ((_sentaku_ret==0&&_sentaku_n_current>=0));then
    # Align values
    if [[ $_sentaku_search ]];then
      local -a selected
      selected=()
      IFS=$_sentaku_sep
      if ((_sentaku_visual!=-1)); then
        local is_first=1
        local i
        local j=0
        for i in "${!_sentaku_visual_list[@]}"; do
          selected[j++]=${_sentaku_items[i]}
        done
      fi
      _sentaku_items=("${_sentaku_items_0[@]}")
      IFS=$_sentaku_IFS
      _sentaku_count=${#_sentaku_items[@]}
      if ((_sentaku_visual!=-1)); then
        sentaku/list#clear
      fi
      _sentaku_n_current=0
      if ((_sentaku_visual!=-1)); then
        local i
        local j
        for ((i=0;i<_sentaku_count;i++)); do
          for ((j=0;j<${#selected[@]};j++)); do
            if [[ ${selected[j]} = "${_sentaku_items[i]}" ]]; then
              _sentaku_n_current=$i
              _sentaku_visual_list[i]=1
            fi
          done
        done
      else
        local val=${_sentaku_items[_sentaku_n_current]}
        local i
        for ((i=0;i<_sentaku_count;i++)); do
          if [[ $val = "${_sentaku_items[$i]}" ]]; then
            _sentaku_n_current=$i
            break
          fi
        done
      fi
      _sentaku_search=
    fi

    # Execution for selected value
    sentaku/execute

    [[ "$_sentaku_opt_align" -eq 1 && "$_sentaku_stdin" -eq 0 ]] &&\
      _sf_align_values "$_sentaku_n_current" 0
  fi

  if [[ "$_SENTAKU_CHILD" -eq 0 && "$_sentaku_opt_noshow" -eq 0 ]];then
    # Show cursor
    tput cnorm >/dev/tty 2>/dev/null || tput vs >/dev/tty 2>/dev/null

    # Enable echo input
    if [[ $_sentaku_stdin -eq 0 ]];then
      if [[ $_sentaku_stty_state ]];then
        stty $_sentaku_stty_state
        # followings are for fixing problems of previous commands...
        stty echo
      fi
    fi
  fi
  if [[ $_sentaku_trapped -eq 1 ]];then
    # fixed at C-c
    stty echo 2>/dev/null
  fi

  # Release variables
  unset _sentaku_file
  unset _sentaku_file_use
  unset _sentaku_sep
  unset _sentaku_sep_push
  unset _sentaku_items
  unset _sentaku_items_cmdline
  unset _sentaku_count
  unset _sentaku_max
  unset _sentaku_min_show
  unset _sentaku_header
  unset _sentaku_opt_noheader
  unset _sentaku_opt_nonumber
  unset _sentaku_opt_showlast
  unset _sentaku_opt_search
  unset _sentaku_opt_pagechange
  unset _sentaku_opt_keymode
  unset _sentaku_opt_color_num
  unset _sentaku_opt_line_highlight
  unset _sentaku_opt_debug
  unset _sentaku_show
  unset _sentaku_rows
  unset _sentaku_cols
  unset _sentaku_max_show
  unset _sentaku_stdin
  unset _sentaku_opt_align
  unset _sentaku_opt_delete
  unset _sentaku_opt_noshow
  unset _sentaku_trapped
  unset _sentaku_normal_echo

  unset _sentaku_invalidated

  unset _sentaku_ext_rows
  unset _sentaku_n_current
  unset _sentaku_n_offset
  unset _sentaku_g_count
  unset _sentaku_arg
  unset _sentaku_visual
  unset _sentaku_visual_list
  unset _sentaku_break
  unset _sentaku_search
  unset _sentaku_search_words
  unset _sentaku_items_n
  unset _sentaku_items_{0..999}

  unset _sentaku_help

  unset _sentaku_stty_state
  unset _sentaku_IFS

  sentaku/FINALIZE

  local ret=$_sentaku_ret
  unset _sentaku_ret
  return $ret
}

function sentaku/FINALIZE {
  :
}

function sentaku/execute {
  if ((_sentaku_visual!=-1));then
    local is_first=1
    local i
    for i in "${!_sentaku_visual_list[@]}"; do
      if [[ $is_first ]]; then
        printf "%s" "${_sentaku_items[i]}"
        is_first=
      else
        printf "$_sentaku_sep%s" "${_sentaku_items[i]}"
      fi
    done
  else
    printf "%s" "${_sentaku_items[$_sentaku_n_current]}"
  fi
}

function sentaku/hide {
  if [[ "$_SENTAKU_CHILD" -eq 0 && "$_sentaku_opt_noshow" -eq 0 ]];then
    if [[ $_sentaku_stdin -eq 0 ]];then
      # Save current stty
      _sentaku_stty_state=$(stty -g)

      # Hide any input
      stty -echo

    fi

    # Hide cursor
    tput civis >/dev/tty 2>/dev/null || tput vi >/dev/tty 2>/dev/null

    # Save current display
    tput smcup >/dev/tty 2>/dev/null || tput ti >/dev/tty 2>/dev/null

    _sentaku_normal_echo=0
  fi
}

function sentaku/clear {
  if [[ "$_SENTAKU_CHILD" -eq 0 && "$_sentaku_opt_noshow" -eq 0 ]];then
    # clear after selection
    clear >/dev/tty

    # Restore display
    tput rmcup >/dev/tty 2>/dev/null || tput te >/dev/tty 2>/dev/null

    _sentaku_normal_echo=1
  fi
}

function sentaku/util/nth {
  local -i arg=$1
  local digit=$arg
  ((digit<0)) && ((digit=-digit))
  ((digit>=20)) && ((digit%=10))
  case $digit in
  (1) ret=${arg}st ;;
  (2) ret=${arg}nd ;;
  (3) ret=${arg}rd ;;
  (*) ret=${arg}th ;;
  esac
}

#------------------------------------------------------------------------------
# mode: sentaku/pause

function ble/widget/sentaku_pause/exit { ble-decode/keymap/pop; }
function ble-decode/keymap:sentaku_pause/define {
  local ble_bind_keymap=sentaku_pause
  ble-bind -f __default__ sentaku_pause/exit
}
function sentaku/pause {
  ble-decode/keymap/push sentaku_pause
}

#------------------------------------------------------------------------------
# mode: sentaku/yn

function ble/widget/sentaku_yn/__before_widget__ {
  clear >/dev/tty
  echo "$message [y/n]: " >/dev/tty
}
function ble/widget/sentaku_yn/yes {
  ble-decode/keymap/pop
  true
  eval "$_sentaku_yn_callback"
}
function ble/widget/sentaku_yn/no {
  ble-decode/keymap/pop
  ble/widget/sentaku/quit # ???
  false
  eval "$_sentaku_yn_callback"
}
function ble-decode/keymap:sentaku_yn/define {
  local ble_bind_keymap=sentaku_tn
  ble-bind -f __default__ nop
  ble-bind -f __before_widget__ sentaku_yn/__before_widget__
  ble-bind -f y sentaku_yn/yes
  ble-bind -f n sentaku_yn/no
}

_sentaku_yn_callback=
function sentaku/yn {
  _sentaku_yn_callback=$1; shift
  local message="$*"
  ble-decode/keymap/push sentaku_yn
  return 148
}

#------------------------------------------------------------------------------

## @fn sentaku/check-args
##   @var[out] arg_continue
function sentaku/check-args {
  # Get arguments
  arg_continue=0
  while (($#)); do
    case $1 in
    ("-f"|"-F") # Use file
      _sentaku_file=$2
      _sentaku_file_use=1
      if [[ ! $_sentaku_file ]];then
        echo "ERROR: empty input was given with -i" >/dev/tty
        return 1
      fi
      shift ;;
    ("-s") # Set separator
      _sentaku_sep=$2
      if [[ $_sentaku_sep == line ]];then
        _sentaku_sep=$'\n'
      fi
      if [[ $_sentaku_sep = $' \t\n' ]];then
        _sentaku_sep_push=' '
      else
        _sentaku_sep_push=$_sentaku_sep
      fi
      shift ;;
    ("-H") _sentaku_opt_noheader=0;;
    ("-N") _sentaku_opt_nonumber=1;;
    ("-U") _sentaku_opt_line_highlight=0;;
    ("-l") _sentaku_opt_showlast=1;;
    ("-a") _sentaku_opt_align=1;;
    ("-m") ;;
    ("-r")
      if [[ "$2" =~ ^[0-9]+$ ]];then
        _sentaku_n_current=$2
        shift
      else
        echo "-r option requires a number" >/dev/tty
        return 1
      fi
      ;;
    ("-p")
      shift
      sentaku/push "$@"
      return $? ;;
    ("-E") _sentaku_opt_keymode=1;;
    ("-V") _sentaku_opt_keymode=0;;
    ("-c") _SENTAKU_CHILD=1;;
    ("-v") echo "$(basename "$0") $SENTAKU_VERSION $SENTAKU_DATE" >/dev/tty; return 0;;
    ("-h")
      sentaku/help
      return 0 ;;
    (-*)
      echo "$(basename "$0") $1: unknown argument
Check \"$(basename "$0" ) -h\" for further information" >/dev/tty
      return 1
      ;;
    (*)
      break ;;
    esac
    shift
  done
  _sentaku_items_cmdline="$*"
  arg_continue=1
  return 0
}

function sentaku/push {
  # Set input
  local input="$*"
  shift $#
  if ((_sentaku_stdin==1)); then
    input=$(cat -)
  fi

  # Ignore blank
  if [[ ! $input ]]; then
    return 1
  fi

  # Renew values
  sentaku/get-values 0 0
  IFS=$_sentaku_sep_push
  _sentaku_items=(${input}${_sentaku_sep_push}${_sentaku_items[@]})
  IFS=$_sentaku_IFS
  _sentaku_count=${#_sentaku_items[@]}
  _sf_align_values 0 0

  sentaku/echoln "$input is stored in $_sentaku_file"
}

## @fn sentaku/get-values [<is_stdin> [<is_check>]]
function sentaku/get-values {
  sentaku/get-values.impl "$1" "$2"
  if ((_sentaku_count==0)); then
    return 1
  else
    sentaku/setview
  fi
}

## @fn sentaku/get-values.impl [<is_stdin> [<is_check>]]
function sentaku/get-values.impl {
  local stdin=$_sentaku_stdin
  local check=1
  if [[ "$1" != "" ]];then
    stdin=$1
  fi
  if [[ "$2" != "" ]];then
    check=$2
  fi
  # Get values
  IFS="$_sentaku_sep"
  if [[ "$stdin" -eq 0 || "$_sentaku_file_use" -eq 1 ]];then
    if [[ "$_sentaku_file_use" -eq 0 && -z "$_sentaku_file" ]];then
      _sentaku_items=($(echo "$_sentaku_items_cmdline"))
    else
      touch "$_sentaku_file"
      _sentaku_items=($(< "$_sentaku_file"))
    fi
  else
    _sentaku_items=($(cat -))
  fi
  IFS=$_sentaku_IFS
  if [[ -n "$ZSH_VERSION" ]];then
    # Fix array for ZSH
    # Zsh's array adds additional empty value to array if IFS is in the end of file.
    if [[ ${#_sentaku_items[@]} -gt 0 ]];then
      local last="${_sentaku_items[$((${#_sentaku_items[@]}-1))]}"
      if [[ "${#last}" -eq 0 ]];then
        _sentaku_items=(${_sentaku_items[0,$((${#_sentaku_items[@]}-2))]})
      fi
    fi
  fi
  _sentaku_count=${#_sentaku_items[@]}

  if [[ "$check" -eq 1 && "$_sentaku_count" -eq 0 ]];then
    if [[ "$stdin" -eq 0 || "$_sentaku_file_use" -eq 1 ]];then
      sentaku/echoln "No value in $_sentaku_file\\n"
    else
      sentaku/echoln "No value in stdin\\n"
    fi
    _sentaku_ret=1
    return
  elif ((_sentaku_count>0)); then
    sentaku/list#clear
  fi
  _sentaku_ret=0
}

function sentaku/align-values () { # {{{ sentaku/align-values [<n> [<is_get>]]
  local n=${1:-$_sentaku_n_current}
  local is_get=${2:-1}
  if [[ ! $n =~ ^[0-9]+$ || n -ge _sentaku_count ]];then
    sentaku/echoln "$n is not valid for sentaku/align-values"
    return 1
  fi
  local v="${_sentaku_items[$n]}"
  printf "%s$_sentaku_sep_push" "$v" > "$_sentaku_file"
  local i
  for ((i=0;i<_sentaku_count;i++)); do
    ((i>=_sentaku_max)) && break
    if [[ ${_sentaku_items[i]} != "$v" ]]; then
      printf "%s$_sentaku_sep_push" "${_sentaku_items[$i]}" >> "$_sentaku_file"
    fi
  done
  if ((is_get==1)); then
    sentaku/get-values
  fi
} # }}}

function sentaku/string#add-spaces { # {{{ sentaku/string#add-spaces <var> <n> [is_prepend]
  local var=$1
  local n=$2
  local prepend=${3:-0}
  while ((n>0));do
    if ((prepend==1));then
      eval "$var=\" \$$var\""
    else
      eval "$var=\"\$$var \""
    fi
    ((n--))
  done
}

## @fn sentaku/string#cut-word <var> <max_length> [<is_last_show>]
function sentaku/string#cut-word {
  local var=$1
  local max_length=$2
  local is_last_show=${3:-0}
  local _value=${!var}
  if ((${#_value}<=max_length)); then
    sentaku/string#add-spaces _value $((max_length-${#_value}))
  elif ((is_last_show==0)); then
    _value=${_value::max_length}
  else
    _value=${_value:${#_value}-max_length}
    return
  fi
  eval "$var=\$_value"
  return
} # }}}

## sentaku/show [<is_selected>] [<n_show>]
function sentaku/show {
  local is_selected=${1:-0}
  local n_show=${2:-$_sentaku_cols}
  sentaku/string#cut-word _sentaku_show "$n_show" "$_sentaku_opt_showlast"

  # Color search words
  if [[ "$_sentaku_search_words" != "" ]];then
    local ignore_case=0
    local search_words=$_sentaku_search_words
    if [[ "$_sentaku_opt_search" -eq 0 ]] || [[ "$_sentaku_opt_search" -eq 2 ]];then
      if [[ -n "$ZSH_VERSION" ]];then
        local words_lower=$_sentaku_search_words:l
      elif [[ -n ${BASH_VERSINFO[0]} ]] && [[ ${BASH_VERSINFO[0]} -ge 4 ]];then
        local words_lower=${_sentaku_search_words,,}
      else
        local words_lower=$(echo ${_sentaku_search_words}|tr "[:upper:]" "[:lower:]")
      fi
      if [[ $words_lower = "$_sentaku_search_words" ]];then
        local ignore_case=1
        search_words=$words_lower
      fi
    fi

    local negative=""
    if [[ "$is_selected" -eq 1 ]];then
      negative=";7"
    fi

    if [[ "$_sentaku_opt_search" -le 1 ]];then
      local -a words
      words=($search_words)
      local w
      for w in "${words[@]}";do
        if [[ $ignore_case -eq 1 ]];then
          # Similar replace can be done by GNU sed, BSD sed doesn't support ignore case option
          _sentaku_show=$(echo "$_sentaku_show"|perl -pe "s|($w)|\\e[31${negative}m\\1\\e[0${negative}m|gi")
        else
          _sentaku_show="${_sentaku_show//$w/\\e[31${negative}m$w\\e[${negative}m}"
        fi
      done
    else
      if [[ $ignore_case -eq 1 ]];then
        _sentaku_show=$(echo "$_sentaku_show"|perl -pe "s|(^$search_words)|\\e[31${negative}m\\1\\e[0${negative}m|gi")
      else
        _sentaku_show="\\e[31${negative}m$search_words\\e[${negative}m${_sentaku_show#$search_words}"
      fi
    fi
  fi
}

function sentaku/printline { # useage: sentaku/printline is_selected n_line n_input {{{
  local is_selected=$1
  local n_line=$2
  local n_input=$3

  local color=""
  if [[ ${_sentaku_visual_list[n_input]} ]];then
    color="[36m"
  fi
  if [[ "$is_selected" -eq 1 ]];then
    if [[ "$_sentaku_opt_line_highlight" -eq 1 ]];then
      color="${color}[7m"
    else
      color="${color}[4m"
    fi
  fi

  # Change line breaks to \n (to be shown), remove the last line break, replace tab to space
  _sentaku_show=${_sentaku_items[$n_input]//$'\n'/\\\\n}
  _sentaku_show=${_sentaku_show%\\\\n}
  _sentaku_show=${_sentaku_show//$'\t'/ }

  tput cup "$n_line" 0 >/dev/tty
  local n_show=$_sentaku_cols
  local num=""
  if ((_sentaku_opt_nonumber==0)); then
    local nmax=$((_sentaku_count-1))
    local num_width=${#nmax}
    n_show=$((_sentaku_cols-num_width-2))
    sentaku/string#add-spaces num $((num_width-${#n_input})) 1
    num="$num$n_input: "
  fi
  sentaku/show "$is_selected" "$n_show"
  if ((_sentaku_opt_color_num==1)); then
    printf "${color}${num}[m${_sentaku_show}" >/dev/tty
  else
    printf "${color}${num}${_sentaku_show}[m" >/dev/tty
  fi
  tput cup "$n_line" 0 >/dev/tty
}

## print current line
function sentaku/print_current_line {
  sentaku/printline 1 $((_sentaku_n_current-_sentaku_n_offset+_sentaku_ext_rows)) $_sentaku_n_current
}

## usage: sentaku/printall [not force]
function sentaku/printall {
  # if any argument is given, check if echoed or not.
  if [[ $# -ge 1 && $_sentaku_invalidated -eq 0 ]];then
    return
  fi

  local lines=$_sentaku_rows
  local cols=$_sentaku_cols
  _sentaku_rows=$(tput lines)
  _sentaku_cols=$(tput cols)

  sentaku/setview

  if ((lines!=_sentaku_rows||cols!=_sentaku_cols)); then
    _sentaku_n_current=0
    _sentaku_n_offset=0
  fi

  clear >/dev/tty

  # Header
  sentaku/util/print "${_sentaku_header}"

  local i
  for ((i=0;i<_sentaku_max_show;i++)); do
    ((i+_sentaku_n_offset>=_sentaku_count)) && break
    if ((i+_sentaku_n_offset==_sentaku_n_current)); then
      sentaku/print_current_line
    else
      sentaku/printline 0 $((i+_sentaku_ext_rows)) $((i+_sentaku_n_offset))
    fi
  done
  _sentaku_invalidated=0
}

function sentaku/util/print { # {{{
  printf "%b" "$*" >/dev/tty
}

function sentaku/echo {
  if [[ $_sentaku_opt_noshow -eq 1 ]];then
    :
  elif [[ $_sentaku_normal_echo -eq 1 ]];then
    sentaku/util/print "$*"
  else
    clear >/dev/tty
    sentaku/util/print "$*"
    _sentaku_invalidated=1
    sentaku/pause
  fi
}

function sentaku/echoln {
  sentaku/echo "$*\\n"
}

function sentaku/echo-debug {
  if [[ ! $_sentaku_opt_debug ]]; then
    # Temporarily use default value for debug_echo before initialization.
    _sentaku_opt_debug=$_SENTAKU_DEBUG
  fi
  if ((_sentaku_opt_debug>0)); then
    sentaku/echo "$*"
  fi
}

function sentaku/echoln-debug {
  sentaku/echo-debug "$*\\n"
}

function sentaku/echo-printall {
  sentaku/echo "$*"
  sentaku/printall
}

function sentaku/set-header {
  _sentaku_header="\\e[43;30m$_sentaku_count values in total\\e[0m "
  if [[ "$_sentaku_opt_noheader" = 1 ]];then
    return
  fi
  if [[ $_sentaku_opt_delete -eq 1 ]];then
    local delete_key="d(delete), "
  else
    local delete_key=""
  fi
  if [[ $_sentaku_opt_keymode -eq 0 ]];then
    if [[ "$_sentaku_cols" -ge 68 ]];then
      _sentaku_header="$_sentaku_header
  [n]j(n-down), [n]k(n-up), gg(top), G(bottom), [n]gg/G, (go to n)
  ^D(Half page down), ^U(Half page up), ^F(Page down), ^B(Page Up)
  ${delete_key}/(search), Enter/Space(select), q(quit)"
    elif [[ "$_sentaku_cols" -ge 41 ]];then
      _sentaku_header="$_sentaku_header
  vimike updown, e.g)j:down, k:up, gg/G
  ${delete_key}Enter/Space(select), q(quit)"
    fi
  else
    if [[ "$_sentaku_cols" -ge 51 ]];then
      _sentaku_header="$_sentaku_header
  C-n(down), C-j(up), C-v(Page down), M-v(Page up)
  Enter(select), C-x(quit)
  Other normal keys start an incremental search"
    fi
  fi
}  # }}}

function sentaku/setview {
  if ((_sentaku_rows<=_sentaku_min_show)); then
    _sentaku_header=
    _sentaku_ext_rows=0
  elif ((_sentaku_rows==_sentaku_min_show+1)); then
    _sentaku_header=${_sentaku_search}
    _sentaku_ext_rows=1
  else
    sentaku/set-header
    _sentaku_header="$_sentaku_header\\n$_sentaku_search"
    if (($(printf "%b\n" "$_sentaku_header"|grep -c ^)>_sentaku_rows-_sentaku_min_show)); then
      _sentaku_header="\e[43;30m$_sentaku_count values in total\e[0m\n${_sentaku_search}"
    fi
    _sentaku_ext_rows=$(printf "%b\n" "$_sentaku_header"|grep -c ^)
  fi

  _sentaku_max_show=$_sentaku_count
  if [[ "$_sentaku_count" -gt $((_sentaku_rows-_sentaku_ext_rows)) ]];then
    _sentaku_max_show=$((_sentaku_rows-_sentaku_ext_rows))
  fi
}

function ble/widget/sentaku/quit {
  [[ $# -gt 0 ]] && _sentaku_ret=$1
  _sentaku_n_current=-1
  _sentaku_break=1
}
function ble/widget/sentaku/select {
  _sentaku_break=1
}

function sentaku/reset {
  _sentaku_n_current=0
  _sentaku_n_offset=0
  _sentaku_g_count=0
  _sentaku_arg=-1
  _sentaku_visual=-1
  sentaku/list#clear
  tput cup "$_sentaku_ext_rows" 0 >/dev/tty
  sentaku/printall
}

#------------------------------------------------------------------------------
# moves

function sentaku/move-down { # The line goes Down. (Increase the line number) {{{
  ((_sentaku_arg<=0)) && _sentaku_arg=1
  local all=0
  local old_current_n=$_sentaku_n_current
  local old_cursor_r=$((_sentaku_n_current-_sentaku_n_offset+_sentaku_ext_rows))
  _sentaku_n_current=$((_sentaku_n_current+_sentaku_arg))
  ((_sentaku_n_current>=_sentaku_count)) && ((_sentaku_arg=-1,_sentaku_n_current=_sentaku_count-1))
  if ((_sentaku_n_current==old_current_n)); then
    _sentaku_g_count=0
    _sentaku_arg=-1
  fi
  if ((_sentaku_n_current+1-_sentaku_max_show>_sentaku_n_offset)); then
    if ((_sentaku_opt_pagechange==0)); then
      ((_sentaku_n_offset=_sentaku_n_current+1-_sentaku_max_show))
    else
      ((_sentaku_n_offset=_sentaku_n_current-_sentaku_n_current%_sentaku_max_show))
    fi
    all=1
  fi
  if ((all==1)); then
    _sentaku_invalidated=1
  elif ((_sentaku_visual<0)); then
    sentaku/printline 0 $old_cursor_r $old_current_n
    sentaku/print_current_line
  fi
  if ((_sentaku_visual>=0)); then
    local tmp_r=$old_cursor_r
    local tmp_n=$old_current_n
    while ((tmp_n<_sentaku_n_current)); do
      sentaku/list#set "$tmp_n" $((tmp_n<_sentaku_visual?0:1))
      ((all!=1)) && sentaku/printline 0 $tmp_r $tmp_n
      ((tmp_r++,tmp_n++))
    done
    _sentaku_visual_list[_sentaku_n_current]=1
    ((all!=1)) && sentaku/print_current_line
  fi
  _sentaku_g_count=0
  _sentaku_arg=-1
}

function sentaku/move-up { # The line goes up. (Decrease the line Number!) {{{
  ((_sentaku_arg<=0)) && _sentaku_arg=1
  local all=0
  local old_current_n=$_sentaku_n_current
  local old_cursor_r=$((_sentaku_n_current-_sentaku_n_offset+_sentaku_ext_rows))
  _sentaku_n_current=$((_sentaku_n_current-_sentaku_arg))
  ((_sentaku_n_current<0)) && _sentaku_n_current=0
  if ((_sentaku_n_current==old_current_n));then
    _sentaku_g_count=0
    _sentaku_arg=-1
  fi
  if ((_sentaku_n_current<_sentaku_n_offset)); then
    if ((_sentaku_opt_pagechange==0)); then
      ((_sentaku_n_offset=_sentaku_n_current))
    else
      ((_sentaku_n_offset=_sentaku_n_current-_sentaku_n_current%_sentaku_max_show))
    fi
    all=1
  fi
  if ((all==1)); then
    _sentaku_invalidated=1
  elif ((_sentaku_visual<0)); then
    sentaku/printline 0 $old_cursor_r $old_current_n
    sentaku/print_current_line
  fi
  if ((_sentaku_visual>=0)); then
    local tmp_r=$old_cursor_r
    local tmp_n=$old_current_n
    while ((tmp_n>_sentaku_n_current)); do
      sentaku/list#set "$tmp_n" $((tmp_n>s_visual?1:0))
      ((all!=1)) && sentaku/printline 0 $tmp_r $tmp_n
      ((tmp_r--,tmp_n--))
    done
    _sentaku_visual_list[_sentaku_n_current]=1
    ((all!=1)) && sentaku/print_current_line
  fi
  _sentaku_g_count=0
  _sentaku_arg=-1
}

function ble/widget/sentaku/append-arg {
  local n=${1:-0}
  ((_sentaku_arg=_sentaku_arg>0?_sentaku_arg*10+n:n))
}

function ble/widget/sentaku/forward-item { sentaku/move-down; }
function ble/widget/sentaku/backward-item { sentaku/move-up; }
function ble/widget/sentaku/page-up {
  ((_sentaku_arg=_sentaku_max_show))
  sentaku/move-up
}
function ble/widget/sentaku/page-down {
  ((_sentaku_arg=_sentaku_max_show))
  sentaku/move-down
}
function ble/widget/sentaku/half-page-down {
  ((_sentaku_arg=_sentaku_max_show/2))
  sentaku/move-down
}
function ble/widget/sentaku/half-page-up {
  ((_sentaku_arg=_sentaku_max_show/2))
  sentaku/move-up
}

function sentaku/goto {
  ((_sentaku_arg=_sentaku_arg-_sentaku_n_current))
  ((_sentaku_arg==0)) && return
  if ((_sentaku_arg<0)); then
    ((_sentaku_arg=-_sentaku_arg))
    sentaku/move-up
  else
    sentaku/move-down
  fi
}
function ble/widget/sentaku/goto-line-or-top {
  if ((_sentaku_g_count==0)); then
    _sentaku_g_count=1
    return
  fi
  ((_sentaku_arg<0)) && _sentaku_arg=0
  sentaku/goto
}
function ble/widget/sentaku/goto-line-or-end {
  ((_sentaku_arg<0)) && _sentaku_arg=$_sentaku_count
  sentaku/goto
}
# function for <C-a>-<C-Z>, <C-Space>
function ble/widget/sentaku/goto-top {
  _sentaku_arg=0
  sentaku/goto
  #local i
  #for ((i=0;i<_sentaku_count;i++)); do
  #  _sentaku_visual=-2
  #  _sentaku_visual_list[i]=1
  #done
  #_sentaku_invalidated=1
}
function ble/widget/sentaku/goto-end {
  _sentaku_arg=$_sentaku_count
  sentaku/goto
}

#------------------------------------------------------------------------------
# edit items

function sentaku/delete {
  : >| "$_sentaku_file"
  local i
  local old_current_n=$_sentaku_n_current
  for ((i=0;i<_sentaku_count;i++)); do
    if ((_sentaku_visual!=-1&&_sentaku_visual_list[i]||_sentaku_visual==-1&&i==old_current_n)); then
      ((i<old_current_n&&_sentaku_n_current--))
      continue
    fi
    printf "%s$_sentaku_sep_push" "${_sentaku_items[$i]}" >> "$_sentaku_file"
  done
  sentaku/get-values
}

function sentaku/remove {
  local old_current_n=$_sentaku_n_current
  if ((_sentaku_visual!=-1)); then
    local i
    for i in "${!_sentaku_visual_list[@]}"; do
      unset '_sentaku_items[i]'
      ((i<old_current_n&&_sentaku_n_current--))
    done
  else
    unset '_sentaku_items[_sentaku_n_current]'
  fi
  _sentaku_items=("${_sentaku_items[@]}")
  _sentaku_count=${#_sentaku_items[@]}
  sentaku/list#clear
}

function ble/widget/sentaku/raise-item {
  ((_sentaku_n_current==0)) && return

  ((_sentaku_arg<=0)) && _sentaku_arg=1

  local replace=$((_sentaku_n_current-_sentaku_arg))
  ((replace<0)) && replace=0

  local v_current=${_sentaku_items[$_sentaku_n_current]}
  local v_replace=${_sentaku_items[$replace]}
  _sentaku_items[$_sentaku_n_current]=$v_replace
  _sentaku_items[$replace]=$v_current
  [[ $_sentaku_stdin -eq 0 ]] && sentaku/align-values 0 0
  sentaku/printall
  sentaku/move-up
}
function ble/widget/sentaku/lower-item {
  ((_sentaku_n_current==_sentaku_count-1)) && return

  ((_sentaku_arg<=0)) && _sentaku_arg=1

  local replace=$((_sentaku_n_current+_sentaku_arg))
  ((replace>_sentaku_count-1)) && replace=$((_sentaku_count-1))

  local v_current=${_sentaku_items[_sentaku_n_current]}
  local v_replace=${_sentaku_items[replace]}
  _sentaku_items[_sentaku_n_current]=$v_replace
  _sentaku_items[replace]=$v_current
  ((_sentaku_stdin==0)) && sentaku/align-values 0 0
  sentaku/printall
  sentaku/move-down
}
function ble/widget/sentaku/delete-item {
  local old_current_n=$_sentaku_n_current
  if ((_sentaku_opt_delete==0||_sentaku_stdin==1)); then
    sentaku/remove
  else
    sentaku/delete
  fi
  if ((_sentaku_count==0)); then
    sentaku/echoln "There are no remained entries"
    _sentaku_ret=1
  fi
  if ((_sentaku_ret));then
    ble/widget/sentaku/quit $_sentaku_ret
    return
  fi
  if ((_sentaku_n_current>=_sentaku_count)); then
    ((_sentaku_n_current=_sentaku_count-1))
  fi
  if ((_sentaku_n_current<_sentaku_n_offset)); then
    _sentaku_n_offset=$_sentaku_n_current
  fi
  local n_move
  if ((_sentaku_count<_sentaku_rows-_sentaku_ext_rows+_sentaku_n_offset)); then
    local n_move=$((_sentaku_rows-_sentaku_ext_rows+_sentaku_n_offset-_sentaku_count))
    if ((n_move>_sentaku_n_offset)); then
      n_move=$_sentaku_n_offset
    fi
    ((_sentaku_n_offset=_sentaku_n_offset-n_move))
  fi
  _sentaku_visual=-1
  sentaku/list#clear
  _sentaku_invalidated=1
}

#------------------------------------------------------------------------------
# mode: sentaku/search

function sentaku/search/update {
  local opts=$1
  _sentaku_search="\e[41;30mSearch:\e[0m \e[31m$_sentaku_search_words\e[0m"

  if [[ ! $_sentaku_search_words ]];then
    _sentaku_items=("${_sentaku_items_0[@]}")
    _sentaku_count=${#_sentaku_items[@]}
  elif [[ :$opts: == *:delete:* ]];then
    :
  else
    local -a inputs
    inputs=()
    local i j=0
    for ((i=0;i<_sentaku_count;i++)); do
      if sentaku/search/check "${_sentaku_items[i]}";then
        inputs[j]=${_sentaku_items[$i]}
        ((j++))
      fi
    done
    _sentaku_items=("${inputs[@]}")
    _sentaku_count=${#_sentaku_items[@]}
    ((_sentaku_items_n++))
    eval "_sentaku_items_${_sentaku_items_n}=(\"\${_sentaku_items[@]}\")"
  fi

  sentaku/reset
}
function sentaku/search/check {
  local input="$1"
  local search_words=$_sentaku_search_words

  if ((_sentaku_opt_search==0||_sentaku_opt_search==2)); then
    local ret
    ble/string#tolower "$input"; local input_lower=$ret
    ble/string#tolower "$_sentaku_search_words"; local words_lower=$ret
    if [[ $words_lower == "$_sentaku_search_words" ]]; then
      input=$input_lower
      search_words=$words_lower
    fi
  fi
  if ((_sentaku_opt_search<=1)); then
    local -a words
    words=(${search_words})
    local w
    for w in "${words[@]}";do
      if ((_sentaku_opt_search<=1)); then
        if [[ $input != *"$w"* ]];then
          return 1
        fi
      fi
    done
  else
    if [[ $input != "$search_words"* ]];then
      return 1
    fi
  fi
  return 0
}

function ble/widget/sentaku_search/backspace {
  if [[ ! $_sentaku_search_words ]]; then
    _sentaku_search=
    _sentaku_search_words=
    sentaku/reset
    ble-decode/keymap/pop
    return
  fi
  sentaku/string#cut-word _sentaku_search_words $((${#_sentaku_search_words}-1))
  ((_sentaku_items_n--))
  eval "_sentaku_items=(\"\${_sentaku_items_$((_sentaku_items_n))[@]}\")"
  _sentaku_count=${#_sentaku_items[@]}
  sentaku/search/update delete
}
function ble/widget/sentaku_search/accept {
  ble/widget/sentaku/select
  ble-decode/keymap/pop
}
function ble/widget/sentaku_search/self-insert {
  local ret; ble/util/c2s "${KEYS[0]}"
  _sentaku_search_words=$_sentaku_search_words$ret
  sentaku/search/update
}
function ble/widget/sentaku_search/clear {
  _sentaku_search_words=""
  _sentaku_items_n=0
  sentaku/search/update
}
function ble/widget/sentaku_search/cancel {
  if ((_sentaku_count==0||_sentaku_opt_keymode==1)); then
    _sentaku_items=("${_sentaku_items_0[@]}")
    _sentaku_count=${#_sentaku_items[@]}
    _sentaku_search=
    _sentaku_search_words=
    sentaku/reset
  fi
  ble-decode/keymap/pop
}

function ble-decode/keymap:sentaku_search/define {
  local ble_bind_keymap=sentaku_search

  ble-bind -f __default__ nop
  ble-bind -f __defchar__ sentaku_search/self-insert

  ble-bind -f 'C-a' sentaku/goto-top
  ble-bind -f 'C-b' sentaku/page-up
  ble-bind -f 'C-d' sentaku/half-page-down
  ble-bind -f 'C-e' sentaku/goto-end
  ble-bind -f 'C-f' sentaku/page-down
  ble-bind -f 'C-n' sentaku/forward-item
  ble-bind -f 'C-p' sentaku/backward-item
  ble-bind -f 'C-i' sentaku/raise-item
  ble-bind -f 'C-o' sentaku/lower-item
  ble-bind -f 'C-r' sentaku/redraw
  ble-bind -f 'C-s' sentaku/start-visual
  ble-bind -f 'C-u' sentaku/half-page-up
  ble-bind -f 'C-x' sentaku/quit

  ble-bind -f 'M-v' sentaku/page-up
  ble-bind -f 'C-v' sentaku/page-down
  ble-bind -f prior sentaku/page-up
  ble-bind -f next sentaku/page-down
  ble-bind -f up sentaku/backward-item
  ble-bind -f down sentaku/forward-item

  ble-bind -f 'C-h' sentaku_search/backspace
  ble-bind -f 'BS'  sentaku_search/backspace
  ble-bind -f 'C-?' sentaku_search/backspace
  ble-bind -f 'DEL' sentaku_search/backspace

  ble-bind -f C-j sentaku_search/accept
  ble-bind -f C-m sentaku_search/accept
  ble-bind -f RET sentaku_search/accept

  ble-bind -f C-u sentaku_search/clear
  ble-bind -f ESC sentaku_search/cancel
}

function ble/widget/sentaku/search {
  if ((_sentaku_ext_rows==0)); then
    sentaku/echo "Too few lines for search mode."
    return
  fi
  local first_char=$1
  if [[ ! $_sentaku_search ]]; then
    _sentaku_items_0=("${_sentaku_items[@]}")
    _sentaku_items_n=0
    _sentaku_search="\e[41;30mSearch:\e[0m"
  fi
  
  if [[ ! $first_char ]]; then
    sentaku/printall
  fi
  _sentaku_search_words="$_sentaku_search_words$first_char"
  sentaku/search/update
  ble-decode/keymap/push sentaku_search
}

#------------------------------------------------------------------------------

function ble/widget/sentaku/start-visual {
  if ((_sentaku_visual>=0)); then
    _sentaku_visual=-2
  else
    _sentaku_visual_list[_sentaku_n_current]=1
    _sentaku_visual=$_sentaku_n_current
    sentaku/print_current_line
  fi
}
function ble/widget/sentaku/toggle {
  # Space to start visual
  sentaku/list#set "$_sentaku_n_current" $((!_sentaku_visual_list[_sentaku_n_current]))
  _sentaku_visual=-2
  sentaku/print_current_line
}

function ble/widget/sentaku/show {
  local ret; sentaku/util/nth "$_sentaku_n_current"; local nth=$ret
  sentaku/echo "$nth value:

${_sentaku_items[$_sentaku_n_current]}\n"
}

function ble/widget/sentaku/redraw {
  _sentaku_invalidated=1
}

function ble/widget/sentaku/cancel {
  if ((_sentaku_visual!=-1)); then
    _sentaku_visual=-1
    sentaku/list#clear
    _sentaku_invalidated=1
  fi
  if [[ $_sentaku_search ]];then
    _sentaku_items=("${_sentaku_items_0[@]}")
    _sentaku_count=${#_sentaku_items[@]}
    _sentaku_search=""
    _sentaku_search_words=""
    sentaku/reset
  fi
}

function ble-decode/keymap:sentaku/define {
  local ble_bind_keymap=sentaku

  ble-bind -f __default__ nop

  if ((_sentaku_opt_keymode==0)); then
    ble-bind -f 0 'sentaku/append-arg 0'
    ble-bind -f 1 'sentaku/append-arg 1'
    ble-bind -f 2 'sentaku/append-arg 2'
    ble-bind -f 3 'sentaku/append-arg 3'
    ble-bind -f 4 'sentaku/append-arg 4'
    ble-bind -f 5 'sentaku/append-arg 5'
    ble-bind -f 6 'sentaku/append-arg 6'
    ble-bind -f 7 'sentaku/append-arg 7'
    ble-bind -f 8 'sentaku/append-arg 8'
    ble-bind -f 9 'sentaku/append-arg 9'
    ble-bind -f d 'sentaku/delete-item' 
    ble-bind -f g 'sentaku/goto-line-or-top'
    ble-bind -f G 'sentaku/goto-line-or-end'
    ble-bind -f j 'sentaku/forward-item'
    ble-bind -f k 'sentaku/backward-item'
    ble-bind -f q 'sentaku/quit'
    ble-bind -f s 'sentaku/show'
    ble-bind -f v 'sentaku/start-visual'
    ble-bind -f / 'sentaku/search'
  else
    function ble/widget/sentaku/self-insert {
      local ret; ble/util/c2s "${KEYS[0]}"
      ble/widget/sentaku/search "$ret"
    }
    ble-bind -f __defchar__ sentaku/self-insert
  fi

  ble-bind -f 'C-a' sentaku/goto-top
  ble-bind -f 'C-b' sentaku/page-up
  ble-bind -f 'C-d' sentaku/half-page-down
  ble-bind -f 'C-e' sentaku/goto-end
  ble-bind -f 'C-f' sentaku/page-down
  ble-bind -f 'C-n' sentaku/forward-item
  ble-bind -f 'C-p' sentaku/backward-item
  ble-bind -f 'C-i' sentaku/raise-item
  ble-bind -f 'C-o' sentaku/lower-item
  ble-bind -f 'C-r' sentaku/redraw
  ble-bind -f 'C-s' sentaku/start-visual
  ble-bind -f 'C-u' sentaku/half-page-up
  ble-bind -f 'C-x' sentaku/quit

  ble-bind -f SP  sentaku/toggle
  ble-bind -f C-j sentaku/select
  ble-bind -f C-m sentaku/select
  ble-bind -f RET sentaku/select

  ble-bind -f 'M-v' sentaku/page-up
  ble-bind -f 'C-v' sentaku/page-down
  ble-bind -f prior sentaku/page-up
  ble-bind -f next sentaku/page-down
  ble-bind -f up sentaku/backward-item
  ble-bind -f down sentaku/forward-item

  ble-bind -f delete sentaku/delete-item

  ble-bind -f ESC sentaku/cancel
}

function sentaku/main {
  # Set trap
  trap "sentaku/clear;_sentaku_trapped=1;_sentaku_stdin=0;_sentaku_ret=1;sentaku/finalize;exit" HUP INT QUIT ABRT SEGV TERM

  # Initializatoin
  sentaku/initialize

  # Get arguments
  local arg_continue
  sentaku/check-args "$@"
  _sentaku_ret=$?
  if ((_sentaku_ret)); then
    sentaku/finalize
    return $?
  fi
  if ((arg_continue==0)); then
    sentaku/finalize
    return $?
  fi

  # Get values
  sentaku/get-values
  _sentaku_ret=$?
  if ((_sentaku_ret)); then
    sentaku/finalize
    return $?
  fi

  # Return nth
  if ((_sentaku_n_current>=0)); then
    sentaku/finalize
    return $?
  fi

  local term_state=$_ble_term_state
  {
    [[ $term_state == external ]] && ble/term/enter

    # Hide displays
    sentaku/hide

    # Initialize values
    sentaku/reset

    sentaku/printall 1
    ble-decode/keymap/push sentaku
    while :; do
      local char ret
      IFS= builtin read -r -d '' -n 1 char; local ext=$?
      ble/util/s2c "$char"
      ble-decode-char "$ret"

      [[ $_ble_decode_keymap == sentaku || $_ble_decode_keymap == sentaku_search ]] &&
        ((_sentaku_break==1)) && break
      [[ $_ble_decode_keymap == sentaku ]] &&
        sentaku/printall 1
    done
    ble-decode/keymap/pop

    # Clear (Show cursor, Restore display, Enable echo input)
    sentaku/clear

    [[ $term_state == external ]] && ble/term/leave
  } < /dev/tty > /dev/tty

  # Finalization
  sentaku/finalize
}

# Execution part
if [[ $1 != -n ]];then
  (sentaku/main "$@")
fi
